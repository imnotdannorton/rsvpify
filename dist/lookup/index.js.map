{"version":3,"sources":["../../src/lookup/index.js"],"names":["lookup","mongoUrl","process","env","MONGODB_URI","connect","err","res","console","log","guestSchema","Schema","name","String","attending","Boolean","guests","Number","request","invite_id","Guest","model","find","req","id","params","results","guest","result","json","push","update","userData","body","_id","item"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAIA,SAAS,EAAb;AACA,IAAIC,WAAWC,QAAQC,GAAR,CAAYC,WAA3B;;AAEA,mBAASC,OAAT,CAAiBJ,QAAjB,EAA2B,UAACK,GAAD,EAAMC,GAAN,EAAY;AACtC,KAAGD,GAAH,EAAO;AACNE,UAAQC,GAAR,CAAY,yBAAuBR,QAAvB,GAAgC,IAA5C,EAAkDK,GAAlD;AACA,EAFD,MAEK;AACJE,UAAQC,GAAR,CAAY,eAAaR,QAAzB;AACA;AACD,CAND;;AAQA,IAAIS,cAAc,IAAI,mBAASC,MAAb,CAAoB;AACrCC,OAAKC,MADgC;AAErCC,YAAUC,OAF2B;AAGrCC,SAAOC,MAH8B;AAIrCC,UAAQL,MAJ6B;AAKrCM,YAAUN;AAL2B,CAApB,CAAlB;;AAQA,IAAIO,QAAQ,mBAASC,KAAT,CAAe,QAAf,EAAyBX,WAAzB,CAAZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEAV,OAAOsB,IAAP,GAAc,UAASC,GAAT,EAAchB,GAAd,EAAkB;AAC9B,KAAIiB,KAAKD,IAAIE,MAAJ,CAAWD,EAApB;AACA,KAAIE,UAAU,EAAd;AACA;AACA,KAAIC,QAAQP,MAAME,IAAN,CAAW,EAAC,aAAYE,EAAb,EAAX,EAA6B,UAAClB,GAAD,EAAMsB,MAAN,EAAiB;AACzDpB,UAAQC,GAAR,CAAY,OAAZ,EAAqBH,GAArB,EAA0B,UAA1B,EAAsCsB,MAAtC;AACA,MAAGA,MAAH,EAAU;AACT;AACArB,OAAIsB,IAAJ,CAAS,EAAC,WAAUD,MAAX,EAAT;AACA,GAHD,MAGK;AACJF,WAAQI,IAAR,CAAa,EAAC,QAAO,YAAR,EAAb;AACAvB,OAAIsB,IAAJ,CAAS,EAAC,WAAUH,OAAX,EAAT;AACA;AACD,EATW,CAAZ;AAUD,CAdD;AAeA1B,OAAO+B,MAAP,GAAgB,UAASR,GAAT,EAAahB,GAAb,EAAiB;AAChC,KAAIyB,WAAWT,IAAIU,IAAnB;AACA,KAAIX,OAAO,EAAC,OAAMU,SAASE,GAAhB,EAAX;AACAd,OAAMW,MAAN,CAAaT,IAAb,EAAmBU,QAAnB,EAA6B,UAAC1B,GAAD,EAAM6B,IAAN,EAAe;AAC3C3B,UAAQC,GAAR,CAAY,WAAZ,EAAyB0B,IAAzB,EAA+B,SAA/B,EAA0C7B,GAA1C;AACA,MAAG6B,IAAH,EAAQ;AACP5B,OAAIsB,IAAJ,CAAS,EAAC,WAAU,SAAX,EAAT;AACA,GAFD,MAEK;AACJtB,OAAIsB,IAAJ,CAAS,EAAC,WAAU,OAAX,EAAT;AACA;AACD,EAPD;AAQA,CAXD;;kBAae7B,M","file":"index.js","sourcesContent":["import facets from '../models/facets';\nimport mongoose from 'mongoose';\n\nlet lookup = {}\nlet mongoUrl = process.env.MONGODB_URI;\n\nmongoose.connect(mongoUrl, (err, res)=>{\n\tif(err){\n\t\tconsole.log(\"error connecting to \"+mongoUrl+\": \", err);\n\t}else{\n\t\tconsole.log(\"success!: \"+mongoUrl);\n\t}\n});\n\nlet guestSchema = new mongoose.Schema({\n\tname:String,\n\tattending:Boolean,\n\tguests:Number,\n\trequest:String,\n\tinvite_id:String\n});\n\nlet Guest = mongoose.model('guests', guestSchema);\n\n// Guest.remove({}, function(err) {\n//   if (err) {\n//     console.log ('error deleting old data.', err);\n//   }else{\n//   \tconsole.log('deleted old daterz');\n//   }\n// });\n\n// let demo = new Guest({\n// \tname:\"Ella Fitzgerald\",\n// \tattending:true,\n// \tguests:2,\n// \trequest:\"I wanna Dance With Somebody\",\n// \tinvite_id:\"01432\"\n// });\n\n// let demo2 = new Guest({\n// \tname:\"Alison Levack\",\n// \tattending:true,\n// \tguests:2,\n// \trequest:\"Invisible Touch\",\n// \tinvite_id:\"01432\"\n// });\n// demo2.save((err)=>{\n// \tif(err){\n// \t\tconsole.log('error saving 2', err);\n// \t}\n// });\n\n// demo.save( (err) => {\n// \tif(err){\n// \t\tconsole.log('error saving', err);\n// \t}\n// });\n\nlookup.find = function(req, res){\n  let id = req.params.id;\n  let results = []\n  // find guests with invite ID of id\n  let guest = Guest.find({\"invite_id\":id}, (err, result) => {\n  \tconsole.log('err: ', err, 'result: ', result);\n  \tif(result){\n  \t\t// push results with that invite ID\n  \t\tres.json({'results':result});\n  \t}else{\n  \t\tresults.push({'name':'none found'});\n  \t\tres.json({'results':results});\n  \t}\n  });\n}\nlookup.update = function(req,res){\n\tlet userData = req.body;\n\tlet find = {'_id':userData._id};\n\tGuest.update(find, userData, (err, item) => {\n\t\tconsole.log('updated: ', item, 'error? ', err);\n\t\tif(item){\n\t\t\tres.json({'message':'success'});\n\t\t}else{\n\t\t\tres.json({'message':'error'});\n\t\t}\n\t}); \t\n}\n\nexport default lookup"]}